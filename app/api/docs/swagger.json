{
    "swagger": "2.0",
    "info": {
        "description": "Service to store handle person data.",
        "title": "Person API",
        "contact": {
            "name": "Gabriel Ribeiro Silva"
        },
        "version": "1.0"
    },
    "paths": {
        "/v1/healthcheck": {
            "get": {
                "description": "Check if ist is running",
                "tags": [
                    "Healthcheck"
                ],
                "summary": "Check if ist is running",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/v1/persons": {
            "get": {
                "description": "Search for persons using its fields",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Person"
                ],
                "summary": "Search for persons",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "c#",
                            "c++"
                        ],
                        "description": "Tags technologies of the person",
                        "name": "tags",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/person.Person"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/handler.Error"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new \"person\" into the system",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Person"
                ],
                "summary": "Creates a new \"person\"",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Idempotency",
                        "name": "X-Idempotency-Key",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Request body",
                        "name": "Request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/person.CreateRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/person.CreateResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/handler.Error"
                            }
                        }
                    }
                }
            }
        },
        "/v1/persons/{id}": {
            "get": {
                "description": "Find a person using its id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Person"
                ],
                "summary": "Find a person",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Person id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/person.Person"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/handler.Error"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            },
            "put": {
                "description": "Replaces all data of a person",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Person"
                ],
                "summary": "Replaces the person",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Idempotency",
                        "name": "X-Idempotency-Key",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Person id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Request body",
                        "name": "Request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/person.UpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/person.Person"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/handler.Error"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/handler.Error"
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a person using its id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Person"
                ],
                "summary": "Delete a person",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Person id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/person.Person"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/handler.Error"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handler.Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handler.Error": {
            "type": "object",
            "properties": {
                "field": {
                    "type": "string",
                    "example": "name"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "person.CreateRequest": {
            "description": "Person create request body",
            "type": "object",
            "required": [
                "name",
                "type"
            ],
            "properties": {
                "contractDuration": {
                    "description": "ContactDuration time of contract",
                    "type": "string",
                    "example": "5 months"
                },
                "name": {
                    "description": "Name of the person",
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 3,
                    "example": "William"
                },
                "role": {
                    "description": "Role of the employee",
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 3,
                    "example": "Software Engineer"
                },
                "tags": {
                    "description": "Tags technologies of the person",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "c#",
                        "c++"
                    ]
                },
                "type": {
                    "description": "Type of the person: contractor - employee",
                    "type": "string",
                    "enum": [
                        "contractor",
                        "employee"
                    ],
                    "example": "employee"
                }
            }
        },
        "person.CreateResponse": {
            "description": "Person create request body",
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "id": {
                    "description": "Id of the person in the system",
                    "type": "string",
                    "maxLength": 36,
                    "minLength": 36,
                    "example": "3de26feb-5cd5-4d70-81b9-44bf6f74f453"
                }
            }
        },
        "person.Person": {
            "description": "Person represents data about a person",
            "type": "object",
            "required": [
                "id",
                "name",
                "type"
            ],
            "properties": {
                "contractDuration": {
                    "description": "ContactDuration time of contract",
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 0,
                    "example": "5 months"
                },
                "createdAt": {
                    "description": "Date of creation",
                    "type": "string",
                    "example": "2006-01-02T15:04:05Z"
                },
                "id": {
                    "description": "Id of the person in the system",
                    "type": "string",
                    "maxLength": 36,
                    "minLength": 36,
                    "example": "3de26feb-5cd5-4d70-81b9-44bf6f74f453"
                },
                "name": {
                    "description": "Name of the person",
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 3,
                    "example": "William"
                },
                "role": {
                    "description": "Role of the employee",
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 3,
                    "example": "Software Engineer"
                },
                "tags": {
                    "description": "Tags technologies of the person",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "c#",
                        "c++"
                    ]
                },
                "type": {
                    "description": "Type of the person: contractor - employee",
                    "type": "string",
                    "enum": [
                        "contractor",
                        "employee"
                    ],
                    "example": "employee"
                },
                "updatedAt": {
                    "description": "Date of the last update",
                    "type": "string",
                    "example": "2006-01-02T15:04:05Z"
                }
            }
        },
        "person.UpdateRequest": {
            "description": "Person update request body",
            "type": "object",
            "required": [
                "name",
                "type"
            ],
            "properties": {
                "contractDuration": {
                    "description": "ContactDuration time of contract",
                    "type": "string",
                    "example": "5 months"
                },
                "name": {
                    "description": "Name of the person",
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 3,
                    "example": "William"
                },
                "role": {
                    "description": "Role of the employee",
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 3,
                    "example": "Software Engineer"
                },
                "tags": {
                    "description": "Tags technologies of the person",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "c#",
                        "c++"
                    ]
                },
                "type": {
                    "description": "Type of the person: contractor - employee",
                    "type": "string",
                    "enum": [
                        "contractor",
                        "employee"
                    ],
                    "example": "employee"
                }
            }
        }
    }
}